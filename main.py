from fastapi import FastAPI, HTTPException, WebSocket
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from pydantic import BaseModel, EmailStr, field_validator
from typing import List

app = FastAPI()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
origins = [
    "https://fastapi-frontend-three.vercel.app",  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://fastapi-frontend-three.vercel.app"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)


specialists = [
    {
        'id': 1,
        'role': '–ü—Å–∏—Ö–æ–ª–æ–≥',
        'name': '–ò–≤–∞–Ω',
        'email': 'ivan@gmail.ru'
    },
    {
        'id': 2,
        'role': '–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç',
        'name': '–ù–∞—Ç–∞–ª—å—è',
        'email': 'node@gmail'
    },
]


# –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
active_connections: List[WebSocket] = []

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """ WebSocket –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. """
    await websocket.accept()
    active_connections.append(websocket)

    try:
        while True:
            await websocket.receive_text()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    except:
        active_connections.remove(websocket)



@app.get('/specialists', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤')
def all_specialists():
    return specialists


@app.get('/specialists/{spec_id}', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def get_specialist(spec_id: int):
    for specialist in specialists:
        if specialist['id'] == spec_id:
            return specialist
    raise HTTPException(status_code=404, detail='–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')



class NewSpecialist(BaseModel):
    role: str
    name: str
    email: EmailStr

    @field_validator("email")
    @classmethod
    def validate_email_domain(cls, value: str):
        if not value.endswith("@dbtplus.ru"):
            raise ValueError("Email –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ @dbtplus.ru")
        return value



@app.post('/specialists')
async def create_specialist(new_specialist: NewSpecialist):
    new_data = {
        'id': len(specialists) + 1,
        'role': new_specialist.role,
        'name': new_specialist.name,
        'email': new_specialist.email,
    }
    specialists.append(new_data)

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket:", specialists)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞–º
    for connection in active_connections:
        await connection.send_json(specialists)

    return {'success': True, 'message': '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω'}




@app.get('/', summary='–ì–ª–∞–≤–Ω–∞—è —Ä—É—á–∫–∞', tags=['–û—Å–Ω–æ–≤–Ω—ã–µ —Ä—É—á–∫–∏'])
def home():
    return 'Hello from fastapi'


if __name__ == '__main__':
    uvicorn.run('main:app', reload=True)