from fastapi import FastAPI, HTTPException
import asyncio
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from pydantic import BaseModel, EmailStr, field_validator

app = FastAPI()


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
data_updated = False

# –ü—Ä–∏–º–µ—Ä —Ä—É—á–∫–∏ –¥–ª—è long polling
@app.get("/long-poll")
async def long_poll():
    global data_updated

    # –ñ–¥–µ–º, –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—Ç—Å—è
    while not data_updated:
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

    # –ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    data_updated = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return {"specialists": specialists}



app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://fastapi-frontend-three.vercel.app"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)


specialists = [
    {
        'id': 1,
        'role': '–ü—Å–∏—Ö–æ–ª–æ–≥',
        'name': '–ò–≤–∞–Ω',
        'email': 'ivan@gmail.ru'
    },
    {
        'id': 2,
        'role': '–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç',
        'name': '–ù–∞—Ç–∞–ª—å—è',
        'email': 'node@gmail'
    },
]



@app.get('/specialists', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤')
def all_specialists():
    return specialists


@app.get('/specialists/{spec_id}', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def get_specialist(spec_id: int):
    for specialist in specialists:
        if specialist['id'] == spec_id:
            return specialist
    raise HTTPException(status_code=404, detail='–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')



class NewSpecialist(BaseModel):
    role: str
    name: str
    email: EmailStr

    @field_validator("email")
    @classmethod
    def validate_email_domain(cls, value: str):
        if not value.endswith("@dbtplus.ru"):
            raise ValueError("Email –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ @dbtplus.ru")
        return value



# –†—É—á–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
@app.post("/specialists")
async def add_specialist(name: str, role: str):
    new_id = len(specialists) + 1
    specialists.append({"id": new_id, "name": name, "role": role})

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    global data_updated
    data_updated = True

    return {"message": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω"}




@app.get('/', summary='–ì–ª–∞–≤–Ω–∞—è —Ä—É—á–∫–∞', tags=['–û—Å–Ω–æ–≤–Ω—ã–µ —Ä—É—á–∫–∏'])
def home():
    return 'Hello from fastapi'


if __name__ == '__main__':
    uvicorn.run('main:app', host='0.0.0.0', port=8000, reload=True)