from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import psycopg
import uvicorn
from pydantic import BaseModel, EmailStr, field_validator

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# –ë–µ—Ä–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = "postgres://eu-central-1.db.thenile.dev/getbetterDB"

try:
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ URL
    conn = psycopg.connect(DATABASE_URL)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NileDB!")

    # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    cur.execute("SELECT version();")
    result = cur.fetchone()
    print("PostgreSQL –≤–µ—Ä—Å–∏—è:", result)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    cur.close()
    conn.close()

except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", e)


specialists = [
    {'id': 1, 'role': '–ü—Å–∏—Ö–æ–ª–æ–≥', 'name': '–ò–≤–∞–Ω', 'email': 'ivan@dbtplus.ru'},
    {'id': 2, 'role': '–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç', 'name': '–ù–∞—Ç–∞–ª—å—è', 'email': 'node@dbtplus.ru'},
]

@app.get('/specialists', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤')
def all_specialists():
    return specialists

@app.get('/specialists/{spec_id}', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def get_specialist(spec_id: int):
    for specialist in specialists:
        if specialist['id'] == spec_id:
            return specialist
    raise HTTPException(status_code=404, detail='–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')

class NewSpecialist(BaseModel):
    role: str
    name: str
    email: EmailStr

    @field_validator("email")
    @classmethod
    def validate_email_domain(cls, value: str):
        if not value.endswith("@dbtplus.ru"):
            raise ValueError("Email –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ @dbtplus.ru")
        return value

@app.post('/specialists', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def create_specialist(new_specialist: NewSpecialist):
    new_id = len(specialists) + 1
    specialist = {
        'id': new_id,
        'role': new_specialist.role,
        'name': new_specialist.name,
        'email': new_specialist.email,
    }
    specialists.append(specialist)
    return {'success': True, 'message': '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 'id': new_id}

@app.delete('/specialists/{spec_id}', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def delete_specialist(spec_id: int):
    global specialists
    for specialist in specialists:
        if specialist['id'] == spec_id:
            specialists = [s for s in specialists if s['id'] != spec_id]
            return {'success': True, 'message': f'–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å ID {spec_id} —É–¥–∞–ª–µ–Ω'}
    raise HTTPException(status_code=404, detail='–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')

@app.get('/', summary='–ì–ª–∞–≤–Ω–∞—è —Ä—É—á–∫–∞', tags=['–û—Å–Ω–æ–≤–Ω—ã–µ —Ä—É—á–∫–∏'])
def home():
    return 'Hello from fastapi'

if __name__ == '__main__':
    uvicorn.run('main:app', reload=True)