from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from pydantic import BaseModel, EmailStr, field_validator
from database import create_tables
from databases import Database

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

DATABASE_URL = 'postgres://01955629-3eff-7fa2-b9ec-59979ded6f4f:7cbeeccc-cde6-46e8-9f9b-b42bc7adc5f1@eu-central-1.db.thenile.dev/getbetterDB'

database = Database(DATABASE_URL)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î
def create_tables():
    from models import Base
    Base.metadata.create_all(bind=database)

@app.on_event("startup")
async def startup():
    try:
        await database.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        create_tables()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {str(e)}")

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

@app.get("/")
def check_db():
    return {"message": "‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã"}


specialists = [
    {'id': 1, 'role': '–ü—Å–∏—Ö–æ–ª–æ–≥', 'name': '–ò–≤–∞–Ω', 'email': 'ivan@dbtplus.ru'},
    {'id': 2, 'role': '–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç', 'name': '–ù–∞—Ç–∞–ª—å—è', 'email': 'node@dbtplus.ru'},
]

@app.get('/specialists', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤')
def all_specialists():
    return specialists

@app.get('/specialists/{spec_id}', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def get_specialist(spec_id: int):
    for specialist in specialists:
        if specialist['id'] == spec_id:
            return specialist
    raise HTTPException(status_code=404, detail='–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')

class NewSpecialist(BaseModel):
    role: str
    name: str
    email: EmailStr

    @field_validator("email")
    @classmethod
    def validate_email_domain(cls, value: str):
        if not value.endswith("@dbtplus.ru"):
            raise ValueError("Email –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ @dbtplus.ru")
        return value

@app.post('/specialists', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def create_specialist(new_specialist: NewSpecialist):
    new_id = len(specialists) + 1
    specialist = {
        'id': new_id,
        'role': new_specialist.role,
        'name': new_specialist.name,
        'email': new_specialist.email,
    }
    specialists.append(specialist)
    return {'success': True, 'message': '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 'id': new_id}

@app.delete('/specialists/{spec_id}', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def delete_specialist(spec_id: int):
    global specialists
    for specialist in specialists:
        if specialist['id'] == spec_id:
            specialists = [s for s in specialists if s['id'] != spec_id]
            return {'success': True, 'message': f'–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å ID {spec_id} —É–¥–∞–ª–µ–Ω'}
    raise HTTPException(status_code=404, detail='–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')

if __name__ == '__main__':
    uvicorn.run('main:app', reload=True) 