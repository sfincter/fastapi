from fastapi import FastAPI, HTTPException
import uvicorn
from pydantic import BaseModel, EmailStr

app = FastAPI()

specialists = [
    {
        'id': 1,
        'role': '–ü—Å–∏—Ö–æ–ª–æ–≥',
        'name': '–ò–≤–∞–Ω',
        'email': 'ivan@gmail.ru'
    },
    {
        'id': 2,
        'role': '–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç',
        'name': '–ù–∞—Ç–∞–ª—å—è',
        'email': 'node@gmail'
    },
]


@app.get('/specialists', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤')
def all_specialists():
    return specialists


@app.get('/specialists/{spec_id}', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def get_specialist(spec_id: int):
    for specialist in specialists:
        if specialist['id'] == spec_id:
            return specialist
    raise HTTPException(status_code=404, detail='–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')



class NewSpecialist(BaseModel):
    role: str
    name: str
    email: EmailStr



@app.post('/specialists', tags=['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã üë®‚Äç‚öïÔ∏è'], summary='–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
def create_specialist(new_specialist: NewSpecialist):
    specialists.append ({
        'id': len(specialists) + 1,
        'role': new_specialist.role,
        'name': new_specialist.name,
        'email': new_specialist.email,
    })
    return {'success':True, 'message': '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω'}



@app.get('/', summary='–ì–ª–∞–≤–Ω–∞—è —Ä—É—á–∫–∞', tags=['–û—Å–Ω–æ–≤–Ω—ã–µ —Ä—É—á–∫–∏'])
def home():
    return 'Hello from fastapi'


if __name__ == '__main__':
    uvicorn.run('main:app', reload=True)